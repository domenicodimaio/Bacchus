import React, { useState, useEffect } from 'react';
import { 
  StyleSheet, 
  Text, 
  View, 
  TextInput, 
  TouchableOpacity, 
  Platform,
  StatusBar,
  Dimensions,
  ScrollView,
  SafeAreaView,
  TouchableWithoutFeedback,
  Keyboard,
  Modal,
  Image,
  Alert,
  KeyboardAvoidingView
} from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { Ionicons, FontAwesome5, MaterialIcons } from '@expo/vector-icons';
import { useTranslation } from 'react-i18next';
import { COLORS, SIZES } from '../constants/theme';
import { useTheme } from '../contexts/ThemeContext';
import * as profileService from '../lib/services/profile.service';
import { useUserProfile } from '../contexts/ProfileContext';
import { useAuth } from '../contexts/AuthContext';
import EmojiSelector from 'react-native-emoji-selector';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';
import authService from '../lib/services/auth.service';

const { width, height } = Dimensions.get('window');

// Colori disponibili per gli avatar
const AVATAR_COLORS = [
  '#FF5252', '#FF4081', '#E040FB', '#7C4DFF', 
  '#536DFE', '#448AFF', '#40C4FF', '#18FFFF', 
  '#64FFDA', '#69F0AE', '#B2FF59', '#EEFF41',
  '#FFFF00', '#FFD740', '#FFAB40', '#FF6E40'
];

// Le fasi del wizard
const WIZARD_STEPS = [
  'welcome',
  'name',
  'gender',
  'weight',
  'age',
  'height',
  'drinkingHabits',
  'emoji',
  'complete'
];

export default function ProfileWizard() {
  const { t, i18n } = useTranslation(['profile', 'common']);
  const { currentTheme } = useTheme();
  const colors = currentTheme.COLORS;
  const { user } = useAuth();
  const { setProfile } = useUserProfile();
  
  // Stato per tenere traccia della fase attuale del wizard
  const [currentStep, setCurrentStep] = useState(0);
  
  // Stato per i dati del profilo
  const [profile, setProfileState] = useState({
    name: user?.name || '',
    gender: '',
    weightKg: '',
    age: '',
    height: '',
    drinkingFrequency: '',
    emoji: '',
    color: AVATAR_COLORS[0],
    isDefault: true
  });
  
  // Stato per la selezione emoji
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showColorPicker, setShowColorPicker] = useState(false);
  
  // Riferimento ai parametri dell'URL
  const params = useLocalSearchParams();
  
  // Stati del wizard
  const [emoji, setEmoji] = useState('ðŸ¥‚');
  const [name, setName] = useState('');
  const [gender, setGender] = useState('');
  const [weightKg, setWeightKg] = useState('70');
  const [heightCm, setHeightCm] = useState('170');
  const [age, setAge] = useState('30');
  const [color, setColor] = useState(AVATAR_COLORS[0]);
  const [drinkingFrequency, setDrinkingFrequency] = useState('');
  const [isGuest, setIsGuest] = useState(params.guest === 'true');
  const [keyboardVisible, setKeyboardVisible] = useState(false);
  const [heightError, setHeightError] = useState('');
  const [loading, setLoading] = useState(false);
  
  // Assicurati che non ci siano dati di wizard precedenti
  useEffect(() => {
    const resetWizardCache = async () => {
      try {
        // Marca esplicitamente il wizard come NON completato
        await authService.setProfileWizardCompleted(false);
        
        // Log per debugging
        console.log('WIZARD: Cache reset on initialization');
        console.log('WIZARD: isGuest =', isGuest ? 'true' : 'false');
        console.log('WIZARD: userAuthenticated =', user ? 'true' : 'false');
        
        // Verifica che il wizard debba effettivamente essere mostrato
        // Se l'utente non Ã¨ ospite e non Ã¨ autenticato, reindirizza al login
        if (!isGuest && !user) {
          console.log('WIZARD: Utente non autorizzato, reindirizzamento a /auth/login');
          router.replace('/auth/login');
          return;
        }
      } catch (error) {
        console.error('WIZARD: Error resetting cache:', error);
      }
    };
    
    resetWizardCache();
  }, []);
  
  // Usa l'utente loggato se non Ã¨ ospite
  useEffect(() => {
    // Controllo se l'utente Ã¨ un ospite basato sui parametri
    setIsGuest(params.guest === 'true');
  }, [params]);

  // Aggiungi listener per la tastiera
  useEffect(() => {
    // Setup keyboard listeners
    const keyboardWillShowListener = Platform.OS === 'ios' ? 
      Keyboard.addListener('keyboardWillShow', (event) => {
        console.log('WIZARD: Keyboard will show', event);
        setKeyboardVisible(true);
      }) : 
      Keyboard.addListener('keyboardDidShow', (event) => {
        console.log('WIZARD: Keyboard did show', event);
        setKeyboardVisible(true);
      });
    
    const keyboardWillHideListener = Platform.OS === 'ios' ? 
      Keyboard.addListener('keyboardWillHide', (event) => {
        console.log('WIZARD: Keyboard will hide', event);
        setKeyboardVisible(false);
      }) : 
      Keyboard.addListener('keyboardDidHide', (event) => {
        console.log('WIZARD: Keyboard did hide', event);
        setKeyboardVisible(false);
      });

    console.log('WIZARD: Component mounted, setting up keyboard listeners');

    return () => {
      console.log('WIZARD: Component unmounting, removing keyboard listeners');
      keyboardWillShowListener.remove();
      keyboardWillHideListener.remove();
    };
  }, []);
  
  // Funzione per ottenere traduzioni con fallback
  const getTranslation = (key, defaultValue = "") => {
    const translation = t(key, { ns: 'profile' });
    
    // Se la traduzione Ã¨ uguale alla chiave, usa il valore di default
    return translation === key ? defaultValue : translation;
  };
  
  // Funzione per andare allo step successivo
  const nextStep = () => {
    if (currentStep < WIZARD_STEPS.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };
  
  // Funzione per tornare allo step precedente
  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };
  
  // Funzione per aggiornare i dati del profilo
  const updateProfile = (field, value) => {
    setProfileState(prevProfile => ({
      ...prevProfile,
      [field]: value
    }));
  };
  
  // Gestisce la selezione delle emoji
  const handleEmojiSelected = (emoji) => {
    updateProfile('emoji', emoji);
    setShowEmojiPicker(false);
  };
  
  // Gestisce la selezione del colore
  const handleSelectColor = (color) => {
    updateProfile('color', color);
    setShowColorPicker(false);
  };
  
  // Funzione per completare il wizard e creare il profilo
  const handleComplete = async () => {
    try {
      setLoading(true);
      
      // Validazione finale
      if (!profile.name || !profile.gender || !profile.weightKg || 
          !profile.age || !profile.height || !profile.drinkingFrequency) {
        console.error('Dati profilo incompleti:', profile);
        Alert.alert(
          t('error', { ns: 'common', defaultValue: 'Errore' }),
          t('allFieldsRequired', { ns: 'profile', defaultValue: 'Tutti i campi sono obbligatori' })
        );
        setLoading(false);
        return;
      }
      
      // Converti i valori numerici
      const profileData = {
        ...profile,
        weightKg: parseInt(profile.weightKg.toString()),
        age: parseInt(profile.age.toString()),
        height: parseInt(profile.height.toString()),
        gender: profile.gender as 'male' | 'female',
        drinkingFrequency: profile.drinkingFrequency as 'rarely' | 'occasionally' | 'regularly' | 'frequently',
        hasCompletedWizard: true // Imposta il flag direttamente nel profilo
      };
      
      console.log('Creazione profilo in corso...');
      console.log('Dati profilo validati:', profileData);
      
      // Prima di creare un nuovo profilo, reinizializziamo il servizio delle sessioni
      // per assicurarci che non ci siano sessioni di account diversi
      try {
        // Importa dinamicamente il servizio delle sessioni per evitare dipendenze circolari
        const sessionService = require('../lib/services/session.service');
        await sessionService.reinitializeSessionService();
        console.log('Servizio delle sessioni reinizializzato prima della creazione del profilo');
      } catch (sessionError) {
        console.error('Errore nella reinizializzazione del servizio delle sessioni:', sessionError);
        // Continuiamo comunque con la creazione del profilo
      }
      
      // Crea il profilo
      const newProfile = await profileService.createProfile(profileData);
      if (!newProfile) {
        console.error('Errore nella creazione del profilo');
        Alert.alert(
          t('error', { ns: 'common', defaultValue: 'Errore' }),
          t('profileCreationError', {
            ns: 'profile',
            defaultValue: 'Errore nella creazione del profilo'
          })
        );
        setLoading(false);
        return;
      }
      
      console.log('Profilo creato con successo:', newProfile);
      
      // Imposta il profilo nel contesto
      await setProfile(newProfile);
      console.log('Profilo impostato nel contesto');
      
      // Imposta il flag di completamento del wizard
      await authService.setProfileWizardCompleted(true);
      
      // Inizializza il servizio delle sessioni per il nuovo profilo
      try {
        const sessionService = require('../lib/services/session.service');
        await sessionService.initSessionService();
        console.log('Servizio delle sessioni inizializzato per il nuovo profilo');
      } catch (sessionError) {
        console.error('Errore nell\'inizializzazione del servizio delle sessioni:', sessionError);
        // Continuiamo comunque con la navigazione
      }
      
      // Navigate to home
      router.replace('/dashboard');
    } catch (error) {
      console.error('Errore durante il completamento del wizard:', error);
      Alert.alert(
        t('error', { ns: 'common', defaultValue: 'Errore' }),
        t('unexpectedError', {
          ns: 'common',
          defaultValue: 'Si Ã¨ verificato un errore imprevisto'
        })
      );
    } finally {
      setLoading(false);
    }
  };
  
  // Gestisce l'uscita dal wizard
  const handleExitWizard = () => {
    Alert.alert(
      t('exitWizard', { ns: 'profile', defaultValue: 'Exit Wizard?' }),
      t('exitWizardConfirmation', { ns: 'profile', defaultValue: 'Are you sure you want to exit? Your progress will be lost.' }),
      [
        {
          text: t('cancel', { ns: 'common', defaultValue: 'Cancel' }),
          style: 'cancel'
        },
        {
          text: t('exit', { ns: 'common', defaultValue: 'Exit' }),
          style: 'destructive',
          onPress: () => router.back()
        }
      ]
    );
  };

  // Ripristino la funzione canProceed
  const canProceed = () => {
    // Nella schermata di benvenuto, possiamo sempre procedere
    if (WIZARD_STEPS[currentStep] === 'welcome') {
      return true;
    }
    
    // Nella schermata del nome, verifichiamo che il nome sia valido
    if (WIZARD_STEPS[currentStep] === 'name') {
      return profile.name && profile.name.trim().length > 0;
    }
    
    // Nella schermata del genere, verifichiamo che il genere sia selezionato
    if (WIZARD_STEPS[currentStep] === 'gender') {
      return !!profile.gender;
    }
    
    // Nella schermata del peso, verifichiamo che il peso sia valido
    if (WIZARD_STEPS[currentStep] === 'weight') {
      return !!profile.weightKg;
    }
    
    // Nella schermata dell'etÃ , verifichiamo che l'etÃ  sia valida
    if (WIZARD_STEPS[currentStep] === 'age') {
      return !!profile.age;
    }
    
    // Nella schermata dell'altezza, verifichiamo che l'altezza sia valida
    if (WIZARD_STEPS[currentStep] === 'height') {
      return !!profile.height && !heightError;
    }
    
    // Nella schermata della frequenza di consumo, verifichiamo che sia selezionata
    if (WIZARD_STEPS[currentStep] === 'drinkingHabits') {
      return !!profile.drinkingFrequency;
    }
    
    // Nelle altre schermate, possiamo sempre procedere
    return true;
  };

  // Renderizza il pulsante di proseguimento giusto per ogni step
  const renderNextButton = () => {
    // Se siamo all'ultimo step, non mostrare il pulsante "Continua"
    if (currentStep === WIZARD_STEPS.length - 1) {
      return null;
    }
    
    // Se siamo alla schermata completato, mostra "Vai alla dashboard"
    if (currentStep === WIZARD_STEPS.indexOf('complete')) {
      return (
        <TouchableOpacity 
          style={[
            styles.nextButton, 
            { 
              backgroundColor: colors.primary,
              shadowColor: colors.primary,
            }
          ]} 
          onPress={() => router.replace('/dashboard')}
        >
          <Text style={styles.nextButtonText}>
            {t('goToDashboard', { ns: 'profile', defaultValue: 'Go to Dashboard' })}
          </Text>
          <Ionicons name="arrow-forward" size={20} color="white" style={{ marginLeft: 8 }} />
        </TouchableOpacity>
      );
    }
    
    // Se siamo alla fase di emoji, mostra "Completa"
    if (currentStep === WIZARD_STEPS.indexOf('emoji')) {
      return (
        <TouchableOpacity 
          style={[
            styles.nextButton, 
            { 
              backgroundColor: colors.primary,
              shadowColor: colors.primary,
            }
          ]} 
          onPress={handleComplete}
        >
          <Text style={styles.nextButtonText}>
            {t('complete', { ns: 'common', defaultValue: 'Complete' })}
          </Text>
          <Ionicons name="checkmark" size={20} color="white" style={{ marginLeft: 8 }} />
        </TouchableOpacity>
      );
    }
    
    // Per tutti gli altri step, mostra il pulsante "Continua"
    return (
      <TouchableOpacity 
        style={[
          styles.nextButton, 
          { 
            backgroundColor: canProceed() ? colors.primary : '#CCCCCC',
            opacity: canProceed() ? 1 : 0.7,
            shadowColor: canProceed() ? colors.primary : 'transparent',
          }
        ]} 
        onPress={nextStep}
        disabled={!canProceed()}
      >
        <Text style={styles.nextButtonText}>
          {t('continue', { ns: 'common', defaultValue: 'Continua' })}
        </Text>
        <Ionicons name="arrow-forward" size={20} color="white" style={{ marginLeft: 8 }} />
      </TouchableOpacity>
    );
  };
  
  // Correggo il renderStepContent per renderizzare il contenuto correttamente
  const renderStepContent = () => {
    // Impedisci lo scrolling verticale nelle pagine del wizard
    const scrollEnabled = false;
    
    let content;
    
    // Logica per determinare il contenuto in base allo step corrente
    switch (WIZARD_STEPS[currentStep]) {
      case 'welcome':
        content = renderWelcomeStep();
        break;
      case 'name':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('nameStepTitle', 'Come ti chiami?')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('nameStepDescription', 'Inserisci il tuo nome o un nickname che vuoi usare nell\'app')}
            </Text>
            <TextInput
              style={[styles.input, { borderColor: colors.border, color: colors.text }]}
              placeholderTextColor={colors.textSecondary}
              placeholder={getTranslation('namePlaceholder', 'Es. Mario')}
              value={profile.name}
              onChangeText={(text) => updateProfile('name', text)}
              maxLength={20}
              returnKeyType="done"
              blurOnSubmit={true}
              onSubmitEditing={() => canProceed() && nextStep()}
            />
          </View>
        );
        break;
      case 'gender':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('genderStepTitle', 'Qual Ã¨ il tuo genere?')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('genderStepDescription', 'Questa informazione Ã¨ necessaria per il corretto calcolo del tuo tasso alcolemico')}
            </Text>
            <View style={styles.optionsContainer}>
              <TouchableOpacity
                style={[
                  styles.optionButton,
                  { 
                    borderColor: profile.gender === 'male' ? colors.primary : colors.border,
                    backgroundColor: profile.gender === 'male' ? `${colors.primary}20` : 'transparent'
                  }
                ]}
                onPress={() => updateProfile('gender', 'male')}
              >
                <Ionicons name="male" size={32} color={profile.gender === 'male' ? colors.primary : colors.textSecondary} />
                <Text style={[
                  styles.optionText, 
                  { 
                    color: profile.gender === 'male' ? colors.primary : colors.textSecondary,
                    fontWeight: profile.gender === 'male' ? 'bold' : 'normal'
                  }
                ]}>
                  {getTranslation('male', 'Uomo')}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[
                  styles.optionButton,
                  { 
                    borderColor: profile.gender === 'female' ? colors.primary : colors.border,
                    backgroundColor: profile.gender === 'female' ? `${colors.primary}20` : 'transparent'
                  }
                ]}
                onPress={() => updateProfile('gender', 'female')}
              >
                <Ionicons name="female" size={32} color={profile.gender === 'female' ? colors.primary : colors.textSecondary} />
                <Text style={[
                  styles.optionText, 
                  { 
                    color: profile.gender === 'female' ? colors.primary : colors.textSecondary,
                    fontWeight: profile.gender === 'female' ? 'bold' : 'normal'
                  }
                ]}>
                  {getTranslation('female', 'Donna')}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        );
        break;
      case 'weight':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('weightStepTitle', 'Quanto pesi?')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('weightStepDescription', 'Il tuo peso Ã¨ essenziale per il calcolo accurato del tasso alcolemico')}
            </Text>
            <View style={styles.inputWithUnit}>
              <TextInput
                style={[styles.input, { flex: 1, borderColor: colors.border, color: colors.text }]}
                placeholderTextColor={colors.textSecondary}
                placeholder={getTranslation('weightPlaceholder', 'Es. 70')}
                value={profile.weightKg?.toString() || ''}
                onChangeText={(text) => {
                  const numValue = text.replace(/[^0-9]/g, '');
                  updateProfile('weightKg', numValue ? parseInt(numValue) : '');
                }}
                keyboardType="numeric"
                maxLength={3}
                returnKeyType="done"
                blurOnSubmit={true}
                onSubmitEditing={() => canProceed() && nextStep()}
              />
              <Text style={[styles.unitText, { color: colors.textSecondary }]}>kg</Text>
            </View>
          </View>
        );
        break;
      case 'age':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('ageStepTitle', 'Quanti anni hai?')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('ageStepDescription', 'La tua etÃ  influenza la tolleranza all\'alcol')}
            </Text>
            <View style={styles.inputWithUnit}>
              <TextInput
                style={[styles.input, { flex: 1, borderColor: colors.border, color: colors.text }]}
                placeholderTextColor={colors.textSecondary}
                placeholder={getTranslation('agePlaceholder', 'Es. 25')}
                value={profile.age?.toString() || ''}
                onChangeText={(text) => {
                  const numValue = text.replace(/[^0-9]/g, '');
                  updateProfile('age', numValue ? parseInt(numValue) : '');
                }}
                keyboardType="numeric"
                maxLength={3}
                returnKeyType="done"
                blurOnSubmit={true}
                onSubmitEditing={() => canProceed() && nextStep()}
              />
              <Text style={[styles.unitText, { color: colors.textSecondary }]}>anni</Text>
            </View>
          </View>
        );
        break;
      case 'height':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('heightStepTitle', 'Quanto sei alto/a?')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('heightStepDescription', 'La tua altezza aiuta a calcolare meglio il tasso alcolemico')}
            </Text>
            <View style={styles.inputWithUnit}>
              <TextInput
                style={[styles.input, { flex: 1, borderColor: heightError ? colors.error : colors.border, color: colors.text }]}
                placeholderTextColor={colors.textSecondary}
                placeholder={getTranslation('heightPlaceholder', 'Es. 175')}
                value={profile.height?.toString() || ''}
                onChangeText={(text) => {
                  const numValue = text.replace(/[^0-9]/g, '');
                  const height = numValue ? parseInt(numValue) : '';
                  
                  // Validazione: altezza deve essere tra 100 e 250 cm
                  setHeightError(height && (height < 100 || height > 250) ? "Altezza non valida" : "");
                  
                  updateProfile('height', height);
                }}
                keyboardType="numeric"
                maxLength={3}
                returnKeyType="done"
                blurOnSubmit={true}
                onSubmitEditing={() => canProceed() && nextStep()}
              />
              <Text style={[styles.unitText, { color: colors.textSecondary }]}>cm</Text>
            </View>
            {heightError && (
              <Text style={[styles.errorText, { color: colors.error }]}>
                {getTranslation('heightError', 'L\'altezza deve essere compresa tra 100 e 250 cm')}
              </Text>
            )}
          </View>
        );
        break;
      case 'drinkingHabits':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('drinkingHabitsStepTitle', 'Come bevi?')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('drinkingHabitsStepDescription', 'Questa informazione Ã¨ necessaria per il corretto calcolo del tasso alcolemico')}
            </Text>
            
            <View style={styles.optionsContainer}>
              {['rarely', 'occasionally', 'regularly', 'frequently'].map((frequency) => (
                <TouchableOpacity
                  key={frequency}
                  style={[
                    styles.optionButton,
                    { 
                      borderColor: profile.drinkingFrequency === frequency ? colors.primary : colors.border,
                      backgroundColor: profile.drinkingFrequency === frequency ? `${colors.primary}20` : 'transparent'
                    }
                  ]}
                  onPress={() => updateProfile('drinkingFrequency', frequency)}
                >
                  <Text 
                    style={[
                      styles.optionText, 
                      { 
                        color: profile.drinkingFrequency === frequency ? '#FFFFFF' : colors.text,
                        fontWeight: profile.drinkingFrequency === frequency ? 'bold' : 'normal',
                      }
                    ]}
                  >
                    {t(frequency)}
                  </Text>
                </TouchableOpacity>
              ))}
            </View>
          </View>
        );
        break;
      case 'emoji':
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {getTranslation('emojiStepTitle', 'Scegli un emoji per il tuo profilo')}
            </Text>
            <Text style={[styles.stepDescription, { color: colors.textSecondary }]}>
              {getTranslation('emojiStepDescription', 'Questo Ã¨ un dettaglio personale e non Ã¨ obbligatorio')}
            </Text>
            
            {/* Anteprima dell'emoji selezionata */}
            {profile.emoji ? (
              <View style={[styles.emojiPreviewContainer, { backgroundColor: profile.color || colors.primary }]}>
                <Text style={styles.emojiPreview}>{profile.emoji}</Text>
              </View>
            ) : (
              <View style={[styles.emojiPreviewContainer, { backgroundColor: profile.color || colors.primary }]}>
                <Text style={styles.profileInitial}>{profile.name ? profile.name.charAt(0).toUpperCase() : '?'}</Text>
              </View>
            )}
            
            <View style={styles.emojiOptionsContainer}>
              {/* Opzione: Seleziona emoji */}
              <TouchableOpacity
                style={[
                  styles.emojiOptionButton,
                  { 
                    backgroundColor: colors.cardElevated,
                    borderColor: colors.border,
                  }
                ]}
                onPress={() => setShowEmojiPicker(true)}
              >
                <Ionicons name="happy-outline" size={40} color={colors.primary} />
                <Text 
                  style={[
                    styles.optionText, 
                    { color: colors.text }
                  ]}
                >
                  {t('selectEmoji', { ns: 'profile', defaultValue: 'Seleziona Emoji' })}
                </Text>
              </TouchableOpacity>
              
              {/* Opzione: Seleziona colore */}
              <TouchableOpacity
                style={[
                  styles.emojiOptionButton,
                  { 
                    backgroundColor: colors.cardElevated,
                    borderColor: colors.border,
                  }
                ]}
                onPress={() => setShowColorPicker(true)}
              >
                <Ionicons name="color-palette-outline" size={40} color={colors.primary} />
                <Text 
                  style={[
                    styles.optionText, 
                    { color: colors.text }
                  ]}
                >
                  {t('selectColor', { ns: 'profile', defaultValue: 'Seleziona Colore' })}
                </Text>
              </TouchableOpacity>
              
              {/* Rimuovi emoji */}
              {profile.emoji && (
                <TouchableOpacity
                  style={[
                    styles.emojiOptionButton,
                    { 
                      backgroundColor: colors.cardElevated,
                      borderColor: colors.border,
                    }
                  ]}
                  onPress={() => updateProfile('emoji', '')}
                >
                  <Ionicons name="close-circle-outline" size={40} color={colors.error} />
                  <Text 
                    style={[
                      styles.optionText, 
                      { color: colors.text }
                    ]}
                  >
                    {t('removeEmoji', { ns: 'profile', defaultValue: 'Remove Emoji' })}
                  </Text>
                </TouchableOpacity>
              )}
            </View>
          </View>
        );
        break;
      case 'complete':
        content = (
          <View style={styles.stepContent}>
            <Ionicons 
              name="checkmark-circle" 
              size={100} 
              color={colors.primary} 
              style={[styles.completeIcon, {
                shadowColor: colors.primaryNeon,
                shadowOffset: { width: 0, height: 0 },
                shadowOpacity: 0.8,
                shadowRadius: 15,
                elevation: 10
              }]} 
            />
            <Text style={[styles.completeTitle, { color: colors.text, fontSize: SIZES.large }]}>
              {t('allSet')}
            </Text>
            <Text style={[styles.completeText, { color: colors.textSecondary }]}>
              {t('profileCreated')}
            </Text>
            <View style={styles.profileSummary}>
              <View style={[styles.summaryCard, { 
                backgroundColor: colors.cardElevated, 
                borderLeftWidth: 4,
                borderLeftColor: colors.primary,
              }]}>
                <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
                  {t('name')}
                </Text>
                <Text style={[styles.summaryValue, { color: colors.text, fontSize: SIZES.subtitle }]}>
                  {profile.name}
                </Text>
              </View>
              <View style={styles.summaryRow}>
                <View style={[styles.summaryCard, { 
                  backgroundColor: colors.cardElevated, 
                  flex: 1, 
                  marginRight: 8, 
                  borderLeftWidth: 4,
                  borderLeftColor: colors.primary,
                }]}>
                  <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
                    {t('gender')}
                  </Text>
                  <Text style={[styles.summaryValue, { color: colors.text, fontSize: SIZES.subtitle }]}>
                    {t(profile.gender)}
                  </Text>
                </View>
                <View style={[styles.summaryCard, { 
                  backgroundColor: colors.cardElevated, 
                  flex: 1, 
                  marginLeft: 8, 
                  borderLeftWidth: 4,
                  borderLeftColor: colors.primary,
                }]}>
                  <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
                    {t('weight')}
                  </Text>
                  <Text style={[styles.summaryValue, { color: colors.text, fontSize: SIZES.subtitle }]}>
                    {profile.weightKg} kg
                  </Text>
                </View>
              </View>
              <View style={[styles.summaryCard, { 
                backgroundColor: colors.cardElevated, 
                borderLeftWidth: 4,
                borderLeftColor: colors.primary,
              }]}>
                <Text style={[styles.summaryLabel, { color: colors.textSecondary }]}>
                  {t('drinkingFrequency')}
                </Text>
                <Text style={[styles.summaryValue, { color: colors.text, fontSize: SIZES.subtitle }]}>
                  {t(profile.drinkingFrequency)}
                </Text>
              </View>
            </View>
            
            {/* Opzione per impostare il profilo come predefinito */}
            <TouchableOpacity 
              style={[styles.defaultProfileOption, { 
                backgroundColor: colors.cardElevated,
                borderColor: colors.border,
                marginTop: 16,
              }]}
              onPress={() => updateProfile('isDefault', !profile.isDefault)}
            >
              <View style={styles.defaultProfileContent}>
                <Text style={[styles.defaultProfileText, { color: colors.text }]}>
                  {t('setAsDefaultProfile', { ns: 'profile', defaultValue: 'Set as default profile' })}
                </Text>
                <Text style={[styles.defaultProfileDescription, { color: colors.textSecondary }]}>
                  {t('defaultProfileDescription', { ns: 'profile', defaultValue: 'This profile will be automatically selected when you log in' })}
                </Text>
              </View>
              <Ionicons 
                name={profile.isDefault ? "checkbox" : "square-outline"} 
                size={24} 
                color={profile.isDefault ? colors.primary : colors.textSecondary} 
              />
            </TouchableOpacity>
          </View>
        );
        break;
      default:
        content = (
          <View style={styles.stepContent}>
            <Text style={[styles.stepTitle, { color: colors.text }]}>
              {t('unexpectedStep', { ns: 'profile', defaultValue: 'Unexpected step' })}
            </Text>
          </View>
        );
    }
    
    return content;
  };
  
  // Calcola la percentuale di progresso
  const progressPercentage = (currentStep / (WIZARD_STEPS.length - 1)) * 100;
  
  // Render del contenuto dello step welcome
  const renderWelcomeStep = () => {
    return (
      <View style={styles.stepContent}>
        <FontAwesome5 
          name="glass-cheers" 
          size={90} 
          color={colors.primary} 
          style={[styles.welcomeIcon, { 
            shadowColor: colors.primaryNeon,
            shadowOffset: { width: 0, height: 0 },
            shadowOpacity: 0.8,
            shadowRadius: 15,
            elevation: 10
          }]} 
        />
        <Text style={[styles.welcomeTitle, { color: colors.text }]}>
          {t('welcomeToAlcolTest', { ns: 'profile', defaultValue: 'Benvenuto in AlcolTest' })}
        </Text>
        <Text style={[styles.welcomeDescription, { color: colors.textSecondary }]}>
          {t('welcomeDescription', { 
            ns: 'profile', 
            defaultValue: 'Prima di iniziare, abbiamo bisogno di alcune informazioni per fornirti un\'esperienza personalizzata e calcolare con precisione il tuo tasso alcolemico.' 
          })}
        </Text>
      </View>
    );
  };
  
  // Aggiungi questa funzione per ottenere il titolo dello step corrente
  const getWizardStepTitle = () => {
    switch (WIZARD_STEPS[currentStep]) {
      case 'welcome':
        return t('welcome', { ns: 'profile', defaultValue: 'Benvenuto' });
      case 'name':
        return t('yourName', { ns: 'profile', defaultValue: 'Il tuo nome' });
      case 'gender':
        return t('yourGender', { ns: 'profile', defaultValue: 'Il tuo genere' });
      case 'weight':
        return t('yourWeight', { ns: 'profile', defaultValue: 'Il tuo peso' });
      case 'age':
        return t('yourAge', { ns: 'profile', defaultValue: 'La tua etÃ ' });
      case 'height':
        return t('yourHeight', { ns: 'profile', defaultValue: 'La tua altezza' });
      case 'drinkingHabits':
        return t('drinkingHabits', { ns: 'profile', defaultValue: 'Abitudini di consumo' });
      case 'emoji':
        return t('profileEmoji', { ns: 'profile', defaultValue: 'Avatar del profilo' });
      case 'complete':
        return t('complete', { ns: 'common', defaultValue: 'Completato' });
      default:
        return '';
    }
  };

  // Aggiungi questa funzione per ottenere il testo del pulsante next
  const getNextButtonText = () => {
    // Se siamo alla fase di emoji, mostra "Completa"
    if (currentStep === WIZARD_STEPS.indexOf('emoji')) {
      return t('complete', { ns: 'common', defaultValue: 'Completa' });
    }
    
    // Se siamo alla schermata completato, mostra "Vai alla dashboard"
    if (currentStep === WIZARD_STEPS.indexOf('complete')) {
      return t('goToDashboard', { ns: 'profile', defaultValue: 'Vai alla dashboard' });
    }
    
    // Per tutti gli altri step, mostra "Continua"
    return t('continue', { ns: 'common', defaultValue: 'Continua' });
  };
  
  return (
    <SafeAreaView style={[styles.container, { backgroundColor: currentTheme.COLORS.background }]}>
      <StatusBar barStyle="light-content" backgroundColor={currentTheme.COLORS.background} />
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={{ flex: 1 }}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 20 : 0}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <View style={styles.contentContainer}>
            {/* Header con titolo */}
            <View style={[styles.header, { paddingVertical: 10 }]}>
              <Text style={[styles.wizardTitle, { color: currentTheme.COLORS.text }]}>
                {getWizardStepTitle()}
              </Text>
            </View>
            
            {/* Progress Indicator - pallini sotto il titolo */}
            <View style={[styles.progressContainer, { marginBottom: 10 }]}>
              {WIZARD_STEPS.map((step, index) => (
                <View
                  key={step}
                  style={[
                    styles.progressDot,
                    { backgroundColor: index <= currentStep ? currentTheme.COLORS.primary : currentTheme.COLORS.border }
                  ]}
                />
              ))}
            </View>

            {/* Step Content */}
            <View style={[styles.scrollContent, { paddingTop: 10 }]}>
              {renderStepContent()}
            </View>

            {/* Pulsanti di navigazione */}
            <View 
              style={[
                styles.navigationContainer, 
                { 
                  borderTopColor: currentTheme.COLORS.border,
                  backgroundColor: currentTheme.COLORS.background
                }
              ]}
            >
              {/* Back Button */}
              {currentStep > 0 && currentStep < WIZARD_STEPS.indexOf('complete') && (
                <TouchableOpacity 
                  style={[
                    styles.backButton, 
                    { 
                      borderColor: currentTheme.COLORS.border,
                      backgroundColor: 'transparent'
                    }
                  ]} 
                  onPress={prevStep}
                >
                  <Ionicons name="arrow-back" size={20} color={currentTheme.COLORS.text} style={{ marginRight: 8 }} />
                  <Text style={[styles.backButtonText, { color: currentTheme.COLORS.text }]}>
                    {t('back', { ns: 'common', defaultValue: 'Indietro' })}
                  </Text>
                </TouchableOpacity>
              )}
              
              {/* Spacer se non c'Ã¨ il pulsante indietro */}
              {(currentStep === 0 || currentStep === WIZARD_STEPS.indexOf('complete')) && <View style={styles.emptySpace} />}
              
              {/* Next/Complete Button */}
              {renderNextButton()}
            </View>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
      
      {/* Modal per la selezione emoji */}
      <Modal
        visible={showEmojiPicker}
        transparent={false}
        animationType="slide"
        onRequestClose={() => setShowEmojiPicker(false)}
      >
        <View style={[styles.modalContainer, { backgroundColor: colors.background }]}>
          <View style={[styles.modalHeader, { backgroundColor: colors.headerBackground }]}>
            <Text style={[styles.modalTitle, { color: colors.text }]}>
              {t('selectEmoji', { ns: 'profile', defaultValue: 'Seleziona Emoji' })}
            </Text>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowEmojiPicker(false)}
            >
              <Ionicons name="close" size={24} color={colors.text} />
            </TouchableOpacity>
          </View>
          <EmojiSelector
            onEmojiSelected={handleEmojiSelected}
            columns={8}
            showSearchBar={true}
            showTabs={true}
            showHistory={true}
          />
        </View>
      </Modal>
      
      {/* Color Picker Modal */}
      <Modal
        visible={showColorPicker}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setShowColorPicker(false)}
      >
        <TouchableOpacity
          style={styles.modalOverlay}
          activeOpacity={1}
          onPress={() => setShowColorPicker(false)}
        >
          <View style={[styles.colorPickerModal, { backgroundColor: colors.cardBackground || colors.background }]}>
            <View style={styles.modalHeader}>
              <Text style={[styles.modalTitle, { color: colors.text }]}>
                {t('selectColor', { ns: 'profile', defaultValue: 'Seleziona Colore' })}
              </Text>
              <TouchableOpacity onPress={() => setShowColorPicker(false)}>
                <Ionicons name="close" size={24} color={colors.text} />
              </TouchableOpacity>
            </View>
            
            <View style={styles.colorGrid}>
              {AVATAR_COLORS.map((colorOption, index) => (
                <TouchableOpacity
                  key={index}
                  style={[
                    styles.colorItem, 
                    { 
                      backgroundColor: colorOption,
                      borderWidth: profile.color === colorOption ? 4 : 2,
                      borderColor: profile.color === colorOption ? '#FFFFFF' : 'rgba(255,255,255,0.2)',
                    }
                  ]}
                  onPress={() => handleSelectColor(colorOption)}
                >
                  {profile.color === colorOption && (
                    <Ionicons name="checkmark" size={28} color="white" />
                  )}
                </TouchableOpacity>
              ))}
            </View>
          </View>
        </TouchableOpacity>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  safeHeaderContainer: {
    width: '100%',
    zIndex: 10,
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingTop: Platform.OS === 'ios' ? 10 : 20,
    paddingBottom: 15,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
    textAlign: 'center',
  },
  closeButton: {
    padding: 8,
    borderRadius: 20,
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 10,
    marginBottom: 20,
  },
  progressBar: {
    flex: 1,
    height: 6,
    backgroundColor: 'rgba(200, 200, 200, 0.3)',
    borderRadius: 3,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 3,
  },
  progressText: {
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 10,
  },
  mainContentContainer: {
    flex: 1,
  },
  contentContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'flex-start',
  },
  scrollViewContent: {
    flexGrow: 1, 
    justifyContent: 'center',
    paddingHorizontal: SIZES.padding,
    paddingTop: SIZES.padding,
    paddingBottom: SIZES.padding * 2,
  },
  stepIndicatorContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 20,
    width: '100%',
  },
  stepIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
  },
  stepDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  stepContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 20,
    marginBottom: 10,
  },
  welcomeIcon: {
    marginBottom: SIZES.marginLarge,
  },
  welcomeTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 16,
    marginTop: 20,
  },
  welcomeDescription: {
    fontSize: SIZES.body,
    textAlign: 'center',
    marginHorizontal: SIZES.padding,
  },
  stepTitle: {
    fontSize: SIZES.xlarge,
    fontWeight: 'bold',
    marginBottom: SIZES.margin,
    textAlign: 'center',
  },
  stepDescription: {
    fontSize: SIZES.body,
    marginBottom: SIZES.margin * 2,
    textAlign: 'center',
    lineHeight: 22,
  },
  input: {
    width: '100%',
    height: 52,
    borderRadius: SIZES.radius,
    paddingHorizontal: SIZES.padding,
    fontSize: SIZES.large,
    marginTop: SIZES.marginSmall,
    borderWidth: 1,
  },
  previewContainer: {
    marginTop: SIZES.marginLarge,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(0,0,0,0.2)',
    paddingVertical: SIZES.paddingSmall,
    paddingHorizontal: SIZES.padding,
    borderRadius: SIZES.radius,
  },
  previewLabel: {
    fontSize: SIZES.body,
    marginRight: 8,
  },
  previewValue: {
    fontSize: SIZES.subtitle,
    fontWeight: 'bold',
  },
  genderOptions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
    marginTop: SIZES.marginLarge,
  },
  genderOption: {
    width: '45%',
    height: 130,
    borderRadius: SIZES.radius,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'transparent',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.shadow,
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  genderText: {
    marginTop: SIZES.marginSmall,
    fontSize: SIZES.body,
    fontWeight: '500',
  },
  weightInputContainer: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 20,
  },
  weightInput: {
    width: 140,
    height: 65,
    borderRadius: SIZES.radius,
    paddingHorizontal: SIZES.padding,
    fontSize: 26,
    fontWeight: '600',
    textAlign: 'center',
    borderWidth: 1,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 3,
    },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  weightUnit: {
    fontSize: SIZES.title,
    marginLeft: SIZES.margin,
    fontWeight: '500',
  },
  keyboardHelp: {
    marginTop: 15,
    fontSize: 14,
    textAlign: 'center',
    opacity: 0.8,
  },
  optionsContainer: {
    width: '100%',
    marginTop: SIZES.marginLarge,
  },
  optionButton: {
    width: '100%',
    padding: SIZES.padding,
    borderRadius: SIZES.radius,
    marginBottom: SIZES.marginSmall,
    alignItems: 'center',
    borderWidth: 2,
    borderColor: 'transparent',
    shadowColor: "#000",
    shadowOffset: {
      width: 0, 
      height: 2
    },
    shadowOpacity: 0.15,
    shadowRadius: 3,
    elevation: 3,
  },
  optionText: {
    fontSize: SIZES.body,
    fontWeight: '500',
  },
  imageOptionsContainer: {
    width: '100%',
    marginTop: SIZES.marginLarge,
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  imageOptionButton: {
    width: '48%',
    padding: SIZES.padding,
    borderRadius: SIZES.radius,
    marginBottom: SIZES.marginSmall,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 2,
    height: 120,
    marginHorizontal: '1%',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.shadow,
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
      },
      android: {
        elevation: 1,
      },
    }),
  },
  completeIcon: {
    marginBottom: SIZES.marginLarge,
  },
  completeTitle: {
    fontSize: SIZES.title,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: SIZES.margin,
  },
  completeText: {
    fontSize: SIZES.body,
    textAlign: 'center',
    marginHorizontal: SIZES.padding,
    marginBottom: SIZES.marginLarge,
  },
  profileSummary: {
    width: '100%',
    marginTop: SIZES.marginLarge,
  },
  summaryCard: {
    padding: SIZES.padding,
    borderRadius: SIZES.radius,
    marginBottom: SIZES.marginSmall,
    ...Platform.select({
      ios: {
        shadowColor: COLORS.shadow,
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
      },
      android: {
        elevation: 1,
      },
    }),
  },
  summaryRow: {
    flexDirection: 'row',
  },
  summaryLabel: {
    fontSize: SIZES.small,
    marginBottom: 4,
  },
  summaryValue: {
    fontSize: SIZES.subtitle,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: SIZES.padding,
    height: 60,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    flex: 1,
    textAlign: 'center',
  },
  modalBackButton: {
    padding: 8,
  },
  emojiPickerContainer: {
    flex: 1,
    width: '100%',
  },
  emojiPreviewContainer: {
    marginBottom: SIZES.marginLarge,
    padding: SIZES.padding,
    borderRadius: SIZES.radius,
    backgroundColor: 'rgba(0,0,0,0.2)',
  },
  emojiOptionsContainer: {
    width: '100%',
    marginTop: SIZES.marginLarge,
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
  },
  emojiOptionButton: {
    width: '48%',
    padding: SIZES.padding,
    borderRadius: SIZES.radius,
    marginBottom: SIZES.marginSmall,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 2,
    height: 120,
    marginHorizontal: '1%',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.shadow,
        shadowOffset: { width: 0, height: 1 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
      },
      android: {
        elevation: 1,
      },
    }),
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  colorPickerModal: {
    padding: 16,
    borderRadius: SIZES.radius,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 5,
    },
    shadowOpacity: 0.34,
    shadowRadius: 6.27,
    elevation: 10,
    width: '90%',
    maxWidth: 400,
  },
  colorGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-around',
    padding: 10,
  },
  colorItem: {
    width: 65,
    height: 65,
    borderRadius: 12,
    marginBottom: 12,
    marginHorizontal: 6,
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    elevation: 4,
  },
  profileInitial: {
    fontSize: SIZES.large,
    fontWeight: 'bold',
  },
  emojiPreview: {
    fontSize: SIZES.large,
    fontWeight: 'bold',
  },
  defaultProfileOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: SIZES.padding,
    borderRadius: SIZES.radius,
    borderWidth: 1,
    marginHorizontal: SIZES.padding,
  },
  defaultProfileContent: {
    flex: 1,
    marginRight: 16,
  },
  defaultProfileText: {
    fontSize: SIZES.body,
    fontWeight: '500',
    marginBottom: 4,
  },
  defaultProfileDescription: {
    fontSize: SIZES.small,
  },
  errorText: {
    fontSize: SIZES.body,
    textAlign: 'center',
  },
  navigationContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderTopWidth: 1,
    backgroundColor: 'transparent',
  },
  backButton: {
    width: 150,
    height: 54,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 16,
    borderRadius: 12,
  },
  nextButton: {
    width: 150,
    height: 54,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 16,
    borderRadius: 12,
  },
  backButtonText: {
    fontSize: 16,
    fontWeight: '600',
  },
  nextButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  emptySpace: {
    width: 150
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingTop: Platform.OS === 'ios' ? 10 : 20,
    paddingBottom: 15,
  },
  wizardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  progressDot: {
    width: 10,
    height: 10,
    borderRadius: 5,
    marginHorizontal: 4
  },
  scrollContent: {
    flexGrow: 1, 
    justifyContent: 'center',
    paddingHorizontal: SIZES.padding,
    paddingTop: SIZES.padding,
    paddingBottom: SIZES.padding * 2,
  },
  inputWithUnit: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 20,
  },
  unitText: {
    fontSize: SIZES.large,
    marginLeft: SIZES.margin,
    fontWeight: '500',
  },
}); 